stages:
- stage: Release
  variables:
    TILEDBPY_VERSION: release-win-wheel-059
    LIBTILEDB_VERSION: 1.7.7
    LIBTILEDB_SHA: 2a886ad69c1e338cda479f0dab24079165441880
  condition: or(startsWith(variables['Build.SourceBranch'], 'refs/tags'), contains(variables['Build.SourceBranchName'], 'release-'))

  jobs:

  - job:
    variables:
      #cibw_test_command: "cd {project}/tiledb/tests && pytest"
      cibw_test_requires: "pytest"
      TILEDB_SRC: '$(Build.Repository.Localpath)/tiledb_src'
      TILEDB_BUILD: '$(Build.Repository.Localpath)/tiledb_build'
      TILEDB_INSTALL: '$(Pipeline.Workspace)/.libtiledb_dist/$(LIBTILEDB_SHA)'
    strategy:
      matrix:
        #macOS:
        #      imageName: 'macOS-10.14'
        #  CIBW_SKIP: cp35-*
        #  SDKROOT: '/Applications/Xcode_10.3.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk'
        windows:
          imageName: 'vs2017-win2016'
          CIBW_SKIP: 'cp27-* cp35-* cp36-* *-win32'
    pool:
      vmImage: $(imageName)

    steps:
    - task: UsePythonVersion@0
    - template: azure-libtiledb-darwin.yml

    - bash: |
        # Set the CIBW_ENVIRONMENT from bash in order to get forward slashes because somewhere in  the
        # cmd/cibw/python chain we end up losing the slashes entirely if we use a job-level variable.
        MPATH=$(python -c 'import os; print(os.environ["TILEDB_INSTALL"].replace("\\","/"))')
        export CIBW_ENVIRONMENT="TILEDB_PATH=${MPATH} SETUPTOOLS_SCM_PRETEND_VERSION=0.5.10"
        echo "##vso[task.setvariable variable=CIBW_ENVIRONMENT]$CIBW_ENVIRONMENT"
      displayName: "Set CIBW_ENVIRONMENT"
      condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))

    - bash: |
        set -xe pipefail
        git checkout $(TILEDBPY_VERSION)
        python -m pip install --upgrade pip pytest cython
        python setup.py sdist --dist-dir wheelhouse
        pip install cibuildwheel==1.1.0
        cibuildwheel --output-dir wheelhouse .
      displayName: "Build and test wheels (macOS)"
      condition: and(succeeded(), ne(variables['Agent.OS'], 'Windows_NT'))

    - script: |
        echo ON
        set "CIBW_BUILD_VERBOSITY=3"
        echo "cibw env: "
        echo "%CIBW_ENVIRONMENT%"
        echo "tiledb_install: "
        echo "%TILEDB_INSTALL%"
        echo "%TILEDB_INSTALL%"
        python -c "import os; print(os.environ['CIBW_ENVIRONMENT'])"
        python -c "import platform; print('py compiler: ', platform.python_compiler())"
        :: this runs under cmd on windows, which we need to use vcvarsall
        call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64
        git checkout $(TILEDBPY_VERSION)
        python -m pip install --upgrade pip pytest cython
        python setup.py sdist --dist-dir wheelhouse
        pip install cibuildwheel==1.1.0
        cibuildwheel --output-dir wheelhouse .
      displayName: "Build and test wheels (Windows)"
      condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))

    - bash: |
        set -x
        echo "TILEDB_SRC -----------------------------------------"
        find $TILEDB_SRC || true
        echo "TILEDB_BUILD -----------------------------------------"
        find $TILEDB_BUILD || true
        echo "TILEDB_INSTALL -----------------------------------------"
        find $TILEDB_INSTALL || true
      displayName: "List all the files"
      condition: always()

    - template: azure-print-logs.yml
    - task: PublishBuildArtifacts@1
      inputs: {pathtoPublish: 'wheelhouse'}

#  - job: sdist
#    displayName: "Make sdist bundle"
#    pool:
#      vmImage: 'ubuntu-16.04'
#    steps:
#    - task: UsePythonVersion@0
#    - bash: |
#        python setup.py sdist
#    - task: PublishBuildArtifacts@1
#      inputs:
#        pathtoPublish: dist
#        artifactName: 'tiledb_py_sdist'

#  - job:
#    variables:
#      HOSTPREFIX: "/host/" # linux builds are run in docker w/ '-v/:/host'
#      cibw_before_build:
#        /host/${BUILD_REPOSITORY_LOCALPATH}/misc/azure-build-libtiledb-unix.sh
#    pool:
#      vmImage: 'ubuntu-16.04'
#    resources:
#      containers:
#      - container: manylinux2010
#        image: 'quay.io/pypa/manylinux2010_x86_64'
#    container: manylinux2010
#    steps:
#    - task: UsePythonVersion@0
#    - bash: |
#        set -xe pipefail
#        python -m pip install --upgrade pip
#        pip install cibuildwheel==1.1.0
#        export CIBW_ENVIRONMENT="TILEDB_PATH=${HOSTPREFIX}/${PIPELINE_WORKSPACE}/.libtiledb_dist/${LIBTILEDB_SHA} CXXFLAGS='-Wno-unused-parameter -lrt -DKJ_USE_EPOLL=0 -D__BIONIC__=1' CFLAGS='-Wno-unused-parameter -lrt -DKJ_USE_EPOLL=0 -D__BIONIC__=1'"
#        cibuildwheel --output-dir wheelhouse .
#    - template: azure-print-logs.yml

#- job: windows
#  pool: {vmImage: 'vs2017-win2016'}
#  variables:
#    CIBW_SKIP: cp27-win_amd64, cp35-win_amd64
#  steps:
#    - task: UsePythonVersion@0
#    - script: choco install vcpython27 -f -y
#      displayName: Install Visual C++ for Python 2.7
#    - bash: |
#        python -m pip install --upgrade pip
#        pip install cibuildwheel==1.1.0
#        cibuildwheel --output-dir wheelhouse .
